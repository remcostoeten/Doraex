openapi: 3.0.3
info:
  title: Database Viewer API
  description: |
    A RESTful API for managing database connections and executing queries.
    Supports SQLite and PostgreSQL databases with connection pooling and secure credential handling.
  version: 1.0.0
  contact:
    name: Remco Stoeten
  license:
    name: MIT

servers:
  - url: http://localhost:3002/api
    description: Local development server

paths:
  /connections:
    get:
      summary: List all database connections
      description: Retrieve a list of all active database connections with sanitized information (no sensitive credentials)
      operationId: getConnections
      tags:
        - Connections
      responses:
        '200':
          description: List of database connections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TConnectionInfo'
              example:
                - id: "mydb_1672531200000"
                  type: "postgres"
                  config:
                    postgres:
                      host: "localhost"
                      port: 5432
                      database: "myapp"
                      user: "dbuser"
                - id: "sqlite_1672531300000"
                  type: "sqlite"
                  config:
                    sqlite:
                      path: "./data/app.db"

    post:
      summary: Create a new database connection
      description: |
        Create and test a new database connection. Supports both SQLite (file-based) 
        and PostgreSQL (credential or URL-based) connections.
      operationId: createConnection
      tags:
        - Connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TCreateConnectionRequest'
            examples:
              postgres_url:
                summary: PostgreSQL with connection URL
                value:
                  name: "Production DB"
                  type: "postgres"
                  config:
                    url: "postgresql://user:password@localhost:5432/mydb"
              postgres_credentials:
                summary: PostgreSQL with individual credentials
                value:
                  name: "Dev DB"
                  type: "postgres"
                  config:
                    host: "localhost"
                    port: 5432
                    database: "devdb"
                    user: "devuser"
                    password: "devpass"
              sqlite:
                summary: SQLite database file
                value:
                  name: "Local SQLite"
                  type: "sqlite"
                  config:
                    path: "./data/local.db"
      responses:
        '200':
          description: Connection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TConnectionCreated'
              example:
                id: "production_1672531400000"
                message: "Connection created successfully"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'
              examples:
                invalid_name:
                  summary: Invalid connection name
                  value:
                    error: "Invalid connection name"
                malformed_url:
                  summary: Malformed PostgreSQL URL
                  value:
                    error: "Malformed connection URL"
                unsupported_type:
                  summary: Unsupported database type
                  value:
                    error: "Unsupported database type"
        '500':
          description: Server error during connection creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'

  /connections/test:
    post:
      summary: Test a database connection
      description: |
        Test a database connection without saving it. Useful for validating 
        connection parameters before creating a permanent connection.
      operationId: testConnection
      tags:
        - Connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TTestConnectionRequest'
            examples:
              postgres_test:
                summary: Test PostgreSQL connection
                value:
                  type: "postgres"
                  config:
                    url: "postgresql://user:password@localhost:5432/testdb"
              sqlite_test:
                summary: Test SQLite connection
                value:
                  type: "sqlite"
                  config:
                    path: "./test.db"
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TConnectionTestResult'
              examples:
                success:
                  summary: Successful connection test
                  value:
                    success: true
                    message: "PostgreSQL connection successful"
                failure:
                  summary: Failed connection test
                  value:
                    success: false
                    message: "Connection test failed"
                    error: "Connection refused"
        '400':
          description: Invalid test request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'
        '500':
          description: Server error during connection test
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TConnectionTestResult'

  /connections/{id}/query:
    post:
      summary: Execute SQL query on a specific connection
      description: |
        Execute a SQL query on an existing database connection. 
        Supports SELECT, INSERT, UPDATE, DELETE and other SQL operations.
      operationId: executeQuery
      tags:
        - Query Execution
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the database connection
          schema:
            type: string
          example: "mydb_1672531200000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TQueryRequest'
            examples:
              select_query:
                summary: SELECT query
                value:
                  query: "SELECT * FROM users WHERE active = true LIMIT 10"
              insert_query:
                summary: INSERT query
                value:
                  query: "INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com')"
              update_query:
                summary: UPDATE query
                value:
                  query: "UPDATE users SET last_login = NOW() WHERE id = 123"
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TQueryResult'
              examples:
                select_result:
                  summary: SELECT query result
                  value:
                    result:
                      - id: 1
                        name: "John Doe"
                        email: "john@example.com"
                        active: true
                      - id: 2
                        name: "Jane Smith"
                        email: "jane@example.com"
                        active: true
                    executedAt: "2023-12-31T12:00:00.000Z"
                    query: "SELECT * FROM users WHERE active = true LIMIT 10"
                insert_result:
                  summary: INSERT query result
                  value:
                    result:
                      changes: 1
                      lastInsertRowid: 456
                    executedAt: "2023-12-31T12:00:00.000Z"
                    query: "INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com')"
        '404':
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'
              example:
                error: "Connection not found"
        '500':
          description: Query execution error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'

  /connections/{id}/tables:
    get:
      summary: List tables in a database
      description: |
        Retrieve a list of all tables in the specified database connection.
        Automatically filters out system tables for cleaner results.
      operationId: getTables
      tags:
        - Schema Browsing
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the database connection
          schema:
            type: string
          example: "mydb_1672531200000"
      responses:
        '200':
          description: List of database tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TTableInfo'
              examples:
                postgres_tables:
                  summary: PostgreSQL tables
                  value:
                    - name: "users"
                    - name: "posts"
                    - name: "comments"
                    - name: "categories"
                sqlite_tables:
                  summary: SQLite tables
                  value:
                    - name: "customers"
                    - name: "orders"
                    - name: "products"
        '404':
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'
              example:
                error: "Connection not found"
        '500':
          description: Error retrieving tables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TErrorResponse'

components:
  schemas:
    TConnectionInfo:
      type: object
      description: Sanitized information about a database connection
      required:
        - id
        - type
        - config
      properties:
        id:
          type: string
          description: Unique identifier for the connection
          example: "mydb_1672531200000"
        type:
          type: string
          enum: [sqlite, postgres]
          description: Type of database connection
        config:
          oneOf:
            - $ref: '#/components/schemas/TSqliteConnectionConfig'
            - $ref: '#/components/schemas/TPostgresConnectionConfig'
            - $ref: '#/components/schemas/TPostgresUrlConnectionConfig'

    TSqliteConnectionConfig:
      type: object
      required:
        - sqlite
      properties:
        sqlite:
          type: object
          required:
            - path
          properties:
            path:
              type: string
              description: File path to the SQLite database
              example: "./data/app.db"

    TPostgresConnectionConfig:
      type: object
      required:
        - postgres
      properties:
        postgres:
          type: object
          required:
            - host
            - port
            - database
            - user
          properties:
            host:
              type: string
              description: PostgreSQL server hostname
              example: "localhost"
            port:
              type: integer
              description: PostgreSQL server port
              example: 5432
            database:
              type: string
              description: Database name
              example: "myapp"
            user:
              type: string
              description: Database username
              example: "dbuser"

    TPostgresUrlConnectionConfig:
      type: object
      required:
        - isUrlConnection
      properties:
        isUrlConnection:
          type: boolean
          description: Indicates this connection uses a URL (sensitive URL not exposed)
          example: true

    TCreateConnectionRequest:
      type: object
      required:
        - name
        - type
        - config
      properties:
        name:
          type: string
          description: Human-readable name for the connection
          minLength: 1
          example: "Production Database"
        type:
          type: string
          enum: [sqlite, postgres]
          description: Type of database to connect to
        config:
          oneOf:
            - $ref: '#/components/schemas/TSqliteConfig'
            - $ref: '#/components/schemas/TPostgresConfig'
            - $ref: '#/components/schemas/TPostgresUrlConfig'

    TSqliteConfig:
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: File path to the SQLite database file
          example: "./data/production.db"

    TPostgresConfig:
      type: object
      required:
        - host
        - port
        - database
        - user
        - password
      properties:
        host:
          type: string
          description: PostgreSQL server hostname
          example: "localhost"
        port:
          type: integer
          description: PostgreSQL server port
          minimum: 1
          maximum: 65535
          example: 5432
        database:
          type: string
          description: Database name
          example: "myapp"
        user:
          type: string
          description: Database username
          example: "appuser"
        password:
          type: string
          description: Database password
          format: password
          example: "secure_password"

    TPostgresUrlConfig:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: PostgreSQL connection URL
          format: uri
          pattern: '^postgres(ql)?://.+'
          example: "postgresql://user:password@localhost:5432/mydb"

    TTestConnectionRequest:
      type: object
      required:
        - type
        - config
      properties:
        type:
          type: string
          enum: [sqlite, postgres]
          description: Type of database to test
        config:
          oneOf:
            - $ref: '#/components/schemas/TSqliteConfig'
            - $ref: '#/components/schemas/TPostgresConfig'
            - $ref: '#/components/schemas/TPostgresUrlConfig'

    TConnectionCreated:
      type: object
      required:
        - id
        - message
      properties:
        id:
          type: string
          description: Unique identifier for the created connection
          example: "production_1672531400000"
        message:
          type: string
          description: Success message
          example: "Connection created successfully"

    TConnectionTestResult:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Whether the connection test was successful
        message:
          type: string
          description: Human-readable test result message
          example: "PostgreSQL connection successful"
        error:
          type: string
          description: Error message if the test failed
          example: "Connection refused"

    TQueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SQL query to execute
          example: "SELECT * FROM users WHERE active = true"

    TQueryResult:
      type: object
      required:
        - result
        - executedAt
        - query
      properties:
        result:
          oneOf:
            - type: array
              items:
                type: object
              description: Array of result rows for SELECT queries
            - type: object
              description: Execution metadata for INSERT/UPDATE/DELETE queries
              properties:
                changes:
                  type: integer
                  description: Number of affected rows
                lastInsertRowid:
                  type: integer
                  description: ID of the last inserted row (SQLite)
        executedAt:
          type: string
          format: date-time
          description: ISO timestamp when the query was executed
          example: "2023-12-31T12:00:00.000Z"
        query:
          type: string
          description: The original SQL query that was executed
          example: "SELECT * FROM users WHERE active = true"

    TTableInfo:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the database table
          example: "users"

    TErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Connection not found"

tags:
  - name: Connections
    description: Database connection management operations
  - name: Query Execution
    description: SQL query execution and result retrieval
  - name: Schema Browsing
    description: Database schema exploration and table listing

security: []

externalDocs:
  description: Database Viewer GitHub Repository
  url: https://github.com/user/database-viewer
